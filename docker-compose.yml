version: '3.9'

services:
  app:
    build:
      context: .
      args:
        DEV: true
    image: storefront
    restart: no
    ports:
      - ${APP_PORT}:8000
    volumes:
      - ./src:/src
    command: >
      sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_ROOT_PASS}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_HOST_PORT: ${EMAIL_HOST_PORT}
      DEFAULT_FOR_EMAIL: ${DEFAULT_FOR_EMAIL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      DJANGO_CACHE_URL: ${DJANGO_CACHE_URL}

  db:
    image: mysql
    restart: on-failure
    container_name: storefront_db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASS}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: ${DB_NAME}
    ports:
      - ${DB_PORT}:3306
    volumes:
      - dev-db-data:/var/lib/mysql
    healthcheck:
      interval: 5s
      test:
        [
          "CMD-SHELL",
          "mysqladmin ping -P 3306 -p${DB_ROOT_PASS} | grep 'mysqld is alive' || exit 1"
        ]

  adminer:
    container_name: storefront_adminer
    image: adminer
    depends_on:
      - db
    restart: on-failure
    ports:
      - ${ADMINER_PORT}:8080

  smtp4dev:
    image: rnwood/smtp4dev
    ports:
      - ${SMTP4DEV_UI_PORT}:80
      - ${SMTP4DEV_PORT}:25
    restart: on-failure

  redis:
    image: redis:6.2-alpine
    ports:
      - ${REDIS_PORT}:6379
    restart: on-failure
    volumes:
      - redisdata:/data

  celery:
    build:
      context: .
      args:
        DEV: true
    command: celery -A storefront worker --loglevel=info
    depends_on:
      - redis
    volumes:
      - ./src:/src
    restart: no
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_ROOT_PASS}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_HOST_PORT: ${EMAIL_HOST_PORT}
      DEFAULT_FOR_EMAIL: ${DEFAULT_FOR_EMAIL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      DJANGO_CACHE_URL: ${DJANGO_CACHE_URL}

  celery-beat:
    build:
      context: .
      args:
        DEV: true
    command: celery -A storefront beat --loglevel=info -s /tmp/celerybeat-schedule
    depends_on:
      - redis
    volumes:
      - ./src:/src
    restart: no
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_ROOT_PASS}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_HOST_PORT: ${EMAIL_HOST_PORT}
      DEFAULT_FOR_EMAIL: ${DEFAULT_FOR_EMAIL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      DJANGO_CACHE_URL: ${DJANGO_CACHE_URL}

  flower:
    build:
      context: .
      args:
        DEV: true
    command: celery -A storefront flower
    depends_on:
      - app
      - redis
      - celery
    restart: no
    volumes:
      - ./src:/src
    environment:
      SECRET_KEY: ${SECRET_KEY}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_ROOT_PASS}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_HOST_PORT: ${EMAIL_HOST_PORT}
      DEFAULT_FOR_EMAIL: ${DEFAULT_FOR_EMAIL}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      DJANGO_CACHE_URL: ${DJANGO_CACHE_URL}
    ports:
      - ${FLOWER_PORT}:5555

volumes:
  dev-db-data:
  redisdata:
